"use strict";

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  function r(e, n, t) {
    function o(i, f) {
      if (!n[i]) {
        if (!e[i]) {
          var c = "function" == typeof require && require;
          if (!f && c) return c(i, !0);
          if (u) return u(i, !0);
          var a = new Error("Cannot find module '" + i + "'");
          throw a.code = "MODULE_NOT_FOUND", a;
        }

        var p = n[i] = {
          exports: {}
        };
        e[i][0].call(p.exports, function (r) {
          var n = e[i][1][r];
          return o(n || r);
        }, p, p.exports, r, e, n, t);
      }

      return n[i].exports;
    }

    for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) {
      o(t[i]);
    }

    return o;
  }

  return r;
})()({
  1: [function (require, module, exports) {
    /*
    ========================================================================================
      Carousel
    
      The Carousel component is a minimal image slider that attempts to follow the
      WCAG 2.0 guidelines to be fully accessible. It is used on post lists (/work) and
      within posts as the main hero component.
    
      TODO:
    ========================================================================================
    */
    var Carousel = function Carousel(element) {
      _classCallCheck(this, Carousel);

      this.element = element; // Set up listener for focus that calls function to set up all keyboard listeners
    };

    module.exports = Carousel;
  }, {}],
  2: [function (require, module, exports) {
    /*
    ========================================================================================
      Mobile Menu
    
      The Mobile Menu component 
    
      TODO:
    ========================================================================================
    */
    var MobileMenu =
    /*#__PURE__*/
    function () {
      function MobileMenu() {
        var _this = this;

        _classCallCheck(this, MobileMenu);

        this.menu = document.querySelector('#mobile-menu');
        this.icon = document.querySelector('.js-open-mobile-menu');
        this.container = document.querySelector('body > .container');
        this.content = document.querySelector('body > .container > .columns > .content');
        this.keyHandler;
        this.opened = false; // Attach click listener to icon to invoke toggle()

        this.icon.addEventListener('click', function () {
          _this.toggle();
        });
      } // Open the mobile menu


      _createClass(MobileMenu, [{
        key: "open",
        value: function open() {
          var _this2 = this;

          this.container.classList.add('has-open-mobile-menu');
          this.content.classList.add('is-inactive');
          this.menu.classList.add('is-active');
          this.icon.classList.add('is-active'); // Change the hamburger to an 'X'

          this.icon.querySelector('.fa').classList.remove('fa-bars');
          this.icon.querySelector('.fa').classList.add('fa-times'); // Manipulate ARIA

          this.menu.setAttribute('aria-expanded', 'true'); // Attach keyUp listener for Esc to invoke close()

          document.addEventListener('keyup', this.keyHandler = function (e) {
            if (e.key == 'Escape') {
              _this2.close();
            }
          }); // Capture current keyboard focus location
          // Force keyboard focus to first element in mobile menu

          this.menu.querySelector('.primary-pages > li:first-of-type > a').focus();
          this.opened = true;
        } // Close the mobile menu

      }, {
        key: "close",
        value: function close() {
          this.container.classList.remove('has-open-mobile-menu');
          this.content.classList.remove('is-inactive');
          this.menu.classList.remove('is-active');
          this.icon.classList.remove('is-active'); // Change the 'X' icon back to a hamburger

          this.icon.querySelector('.fa').classList.add('fa-bars');
          this.icon.querySelector('.fa').classList.remove('fa-times'); // Manipulate ARIA

          this.menu.setAttribute('aria-expanded', 'true'); // Detach the key listener

          document.removeEventListener('keyup', this.keyHandler); // Return keyboard focus to previous element

          this.opened = false;
        } // Alternate state of mobile menu

      }, {
        key: "toggle",
        value: function toggle() {
          if (this.opened) {
            this.close();
          } else {
            this.open();
          }
        }
      }]);

      return MobileMenu;
    }();

    module.exports = MobileMenu;
  }, {}],
  3: [function (require, module, exports) {
    /*
    ========================================================================================
      Overlay
    
      The Overlay component is a full-screen promotional message that is actuated by
      a teaser "pulldown tab" inviting users to click.
    
      TODO:
    ========================================================================================
    */
    var Overlay =
    /*#__PURE__*/
    function () {
      function Overlay() {
        var _this3 = this;

        _classCallCheck(this, Overlay);

        this.overlay = document.querySelector('.overlay');
        this.pulldownTab = document.querySelector('.overlay .pulldown-tab');
        this.closeIcon = document.querySelector('.overlay .icon.close');
        this.sendMessage = document.querySelector('.overlay .send-message');
        this.keyHandler;
        this.opened = false; // Open the overlay on click of pulldown tab

        this.pulldownTab.addEventListener('click', function () {
          _this3.show();
        }); // Close the overlay on click of the 'X' icon

        this.closeIcon.addEventListener('click', function () {
          _this3.hide();
        });
      }

      _createClass(Overlay, [{
        key: "show",
        value: function show() {
          var _this4 = this;

          this.overlay.classList.add('is-open'); // Manipulate ARIA
          // Capture current keyboard focus
          // Place keyboard focus onto "send me a message" button

          this.sendMessage.focus(); // Set up keyUp listener to close overlay on Esc

          document.addEventListener('keyup', this.keyHandler = function (e) {
            if (e.key == 'Escape') {
              _this4.hide();
            }
          });
          this.opened = true;
        }
      }, {
        key: "hide",
        value: function hide() {
          this.overlay.classList.remove('is-open'); // Manipulate ARIA
          // Return keyboard focus to previous spot
          // Remove keyUp listener for Esc

          document.removeEventListener('keyup', this.keyHandler);
          this.opened = false;
        }
      }]);

      return Overlay;
    }();

    module.exports = Overlay;
  }, {}],
  4: [function (require, module, exports) {
    /*
    ========================================================================================
      Search
    
      The Search component is a collapsible input box that lets users search the site.
      It is actuated by clicking on the magnifying glass icon, which exists under the 
      sidebar menu in the desktop view, and at the top of the site on mobile devices.
    
      TODO:
      - Figure out how to globally manage keyboard focus so it can be returned to last
        active element.
    ========================================================================================
    */
    var Search =
    /*#__PURE__*/
    function () {
      function Search(element) {
        var _this5 = this;

        _classCallCheck(this, Search);

        this.element = element;
        this.icon = this.element.querySelector('.icon .fa');
        this.input = this.element.querySelector('.input');
        this.keyHandler;
        this.blurHandler;
        this.previousActiveElement;
        this.opened = false; // Attach listener for click on .icon

        this.icon.addEventListener("click", function () {
          _this5.toggle();
        });
      } // Open up the search component


      _createClass(Search, [{
        key: "show",
        value: function show() {
          var _this6 = this;

          // Switch icon to 'X'
          this.icon.classList.remove('fa-search');
          this.icon.classList.add('fa-times'); // Expand the component using the CSS class

          this.element.classList.add('is-active'); // Capture the last element to have keyboard focus
          // Force keyboard focus on to input

          this.input.focus(); // Attach listener for Esc key to invoke hide()

          document.addEventListener('keyup', this.keyHandler = function (e) {
            if (e.key == 'Escape') {
              _this6.hide();
            }
          }); // Attach listener for blur on input to invoke hide()

          this.input.addEventListener('blur', this.blurHandler = function () {
            _this6.hide();
          }); // Manipulate ARIA?

          this.opened = true;
        } // Close the search component

      }, {
        key: "hide",
        value: function hide() {
          // Switch icon to magnifier glass
          this.icon.classList.remove('fa-times');
          this.icon.classList.add('fa-search'); // Collapse the component using CSS

          this.element.classList.remove('is-active'); // Destroy listener for Esc key

          if (this.keyHandler != undefined) {
            document.removeEventListener('keyup', this.keyHandler);
          } // Destroy listener for blur


          if (this.blurHandler != undefined) {
            this.input.removeEventListener('blur', this.blurHandler);
          } // Move keyboard focus back to where it was
          // Manipulate ARIA?


          this.opened = false;
        }
      }, {
        key: "toggle",
        value: function toggle() {
          if (this.opened) {
            this.hide();
          } else {
            this.show();
          }
        }
      }]);

      return Search;
    }();

    module.exports = Search;
  }, {}],
  5: [function (require, module, exports) {
    /*
    ========================================================================================
      Work
    
      The Work class controls the behavior of the /work page, loading and unloading
      content (lists of posts) based on the most recently selected page
    
      TODO:
      - Load a list of posts based on the selected page
    ========================================================================================
    */
    var Carousel = require('./Carousel');

    var Work =
    /*#__PURE__*/
    function () {
      function Work() {
        var _this7 = this;

        _classCallCheck(this, Work);

        this.phpFilesLocation = '/wp-content/themes/minimal-for-jasonwebbio/php/work/';
        this.currentPage = 'creative';
        this.previousPage = '';
        this.validPages = this.getValidPages();
        this.tags = document.querySelectorAll('.tag');
        this.workItemsContainer = document.querySelector('.work-page .work-items'); // Load the default page

        this.load(this.currentPage); // Set up click listeners on all valid pages to unload current posts and load new posts

        document.querySelectorAll('.tag').forEach(function (tag) {
          tag.addEventListener("click", function (e) {
            // Deactivate all other tags
            _this7.tags.forEach(function (tag) {
              tag.classList.remove('is-active');
            }); // Identify and load next page


            var page = e.target.hash.substr(1, e.target.hash.length); // strip the # from the [href] to get page name

            _this7.load(page);
          });
        });
      } // Retrieve and inject the contents of the PHP file associated with the provided page


      _createClass(Work, [{
        key: "load",
        value: function load(page) {
          if (page === this.previousPage || !this.validPages.includes(page)) {
            return;
          }

          this.unload();
          this.previousPage = this.currentPage;
          this.currentPage = page; // Add .is-active to the right .tag

          document.querySelector('.tag[href="#' + this.currentPage + '"]').classList.add('is-active');
          var nextPosts; // Retrieve content (JSON) for the requested page

          fetch(this.phpFilesLocation + 'get-work-items.php?page=' + this.currentPage).then(function (response) {
            return response.text();
          }).then(function (text) {
            nextPosts = text;
          }); // Parse retrieved work items and display on page

          if (nextPosts != undefined && nextPosts.length > 0) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = nextPosts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {// Display post data via template
                // If there is a carousel, create a Carousel object for it        

                post = _step.value;
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
        } // Remove all posts from the page

      }, {
        key: "unload",
        value: function unload() {
          // Fade out current content - one post at a time in "falling bricks" motion
          var posts = document.querySelectorAll('.work-item');

          if (posts != undefined && NodeList.prototype.isPrototypeOf(posts) && posts.length > 0) {
            Array.prototype.forEach(posts, function (post) {
              console.log(post);
            });
          }
        } // Compile a list of all pages based on anchors in the markup

      }, {
        key: "getValidPages",
        value: function getValidPages() {
          var links = document.getElementsByClassName('tag');
          var pages = [];
          Array.prototype.forEach.call(links, function (link) {
            pages.push(link.hash.substr(1, link.hash.length));
          });
          return pages;
        }
      }]);

      return Work;
    }();

    module.exports = Work;
  }, {
    "./Carousel": 1
  }],
  6: [function (require, module, exports) {
    var Search = require('./Search'),
        MobileMenu = require('./MobileMenu'),
        Carousel = require('./Carousel'),
        Overlay = require('./Overlay'),
        Work = require('./Work');
    /*
      TODO:
      - Load components based on route (/work, etc)
    */
    // Activate the Search component on every page


    var search = new Search(document.querySelector('.sidebar .search')); // Activate the Overlay component on every page

    var overlay = new Overlay(); // if(MOBILE VIEWPORT) {

    var mobileMenu = new MobileMenu();
    var mobileSearch = new Search(document.querySelector('.mobile-controls .search')); // }
    // Activate the Work component only when on the /work page

    if ($('.work-page').length > 0) {
      var work = new Work();
    }
  }, {
    "./Carousel": 1,
    "./MobileMenu": 2,
    "./Overlay": 3,
    "./Search": 4,
    "./Work": 5
  }]
}, {}, [6]);